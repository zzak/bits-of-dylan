//
// Conditions for {<compilation-record> "dfmc-boot"}:
//

Warning: 
  Contradictory properties #(compiler-open, open) specified in the definition of
  <mutable-object-with-elements> - using default setting. 

Warning: Type check can fail - <object> inferred, {<&raw-type> <raw-machine-word>} expected. 

Warning: Type check can fail - <object> inferred, {<&raw-type> <raw-machine-word>} expected. 

Warning: 
  Definition of {<c-statically-typed-function-pointer> in dylan-c-ffi-hygiene-glitches}
  is declared open, but it is not exported from this library
  (This warning can be avoided by declaring the definition "dynamic" instead of "open") 

//
// Conditions for {<compilation-record> "collection"}:
//

Warning at collection.dylan:341: 
  Multiple applicable copy-down methods for
  method map-as-one
    (type :: subclass(<vector>), function :: <function>, collection :: <explicit-key-collection>,
     #next next-method :: <object>) => (new-collection :: <vector>), picking one at random 

collection.dylan:341: ---------------------------------------------------------------
collection.dylan:341: define copy-down-method map-as-one (type :: subclass(<vector>),
collection.dylan:342:                                     function :: <function>,
collection.dylan:343:                                     collection ::  <explicit-key-collection>) =>
collection.dylan:344:   (new-collection :: <vector>);
collection.dylan:344: ------------------------------

Warning at collection.dylan:346: 
  Multiple applicable copy-down methods for
  method map-as-one
    (type :: singleton(<list>), function :: <function>, collection :: <explicit-key-collection>,
     #next next-method :: <object>) => (new-collection :: <vector>), picking one at random 

collection.dylan:346: ---------------------------------------------------
collection.dylan:346: define copy-down-method map-as-one (type == <list>,
collection.dylan:347:                                     function :: <function>,
collection.dylan:348:                                     collection ::  <explicit-key-collection>) =>
collection.dylan:349:   (new-collection :: <vector>);
collection.dylan:349: ------------------------------

Warning at collection.dylan:415: 
  Multiple applicable copy-down methods for
  method map-into-stretchy-one
    (fun :: <function>, target :: <mutable-collection>, coll :: <sequence>,
     #next next-method :: <object>) => (target :: <mutable-collection>), picking one at random 

collection.dylan:415: ---------------------------------------------
collection.dylan:415: define copy-down-method map-into-stretchy-one
collection.dylan:416:     (fun :: <function>, target :: <mutable-collection>, coll :: <sequence>)
collection.dylan:417:  => (target :: <mutable-collection>);
collection.dylan:417: ------------------------------------

Warning at collection.dylan:588: 
  Multiple applicable copy-down methods for
  method map-into-rigid-one
    (fun :: <function>, target :: <mutable-collection>, coll :: <list>,
     #next next-method :: <object>) => (target :: <mutable-collection>), picking one at random 

collection.dylan:588: -------------------------------------------------
collection.dylan:588: define inline copy-down-method map-into-rigid-one
collection.dylan:589:   (fun :: <function>, target :: <mutable-collection>, coll :: <list>) =>
collection.dylan:590:   (target :: <mutable-collection>);
collection.dylan:590: ----------------------------------

Warning at collection.dylan:591: 
  Multiple applicable copy-down methods for
  method map-into-rigid-one
    (fun :: <function>, target :: <mutable-collection>, coll :: <simple-object-vector>,
     #next next-method :: <object>) => (target :: <mutable-collection>), picking one at random 

collection.dylan:591: -------------------------------------------------
collection.dylan:591: define inline copy-down-method map-into-rigid-one
collection.dylan:592:   (fun :: <function>, target :: <mutable-collection>, coll :: <simple-object-vector>) =>
collection.dylan:593:   (target :: <mutable-collection>);
collection.dylan:593: ----------------------------------

Warning at collection.dylan:664: 
  Multiple applicable copy-down methods for
  method map-into-rigid-one
    (fun :: <function>, target :: <mutable-sequence>, coll :: <list>,
     #next next-method :: <object>) => (target :: <mutable-collection>), picking one at random 

collection.dylan:664: -------------------------------------------------
collection.dylan:664: define inline copy-down-method map-into-rigid-one
collection.dylan:665:   (fun :: <function>, target :: <mutable-sequence>, coll :: <list>) =>
collection.dylan:666:   (target :: <mutable-collection>);
collection.dylan:666: ----------------------------------

Warning at collection.dylan:667: 
  Multiple applicable copy-down methods for
  method map-into-rigid-one
    (fun :: <function>, target :: <mutable-sequence>, coll :: <simple-object-vector>,
     #next next-method :: <object>) => (target :: <mutable-collection>), picking one at random 

collection.dylan:667: -------------------------------------------------
collection.dylan:667: define inline copy-down-method map-into-rigid-one
collection.dylan:668:   (fun :: <function>, target :: <mutable-sequence>, coll :: <simple-object-vector>) =>
collection.dylan:669:   (target :: <mutable-collection>);
collection.dylan:669: ----------------------------------

//
// Conditions for {<compilation-record> "stretchy-vector"}:
//

Warning at stretchy-vector.dylan:665: 
  Multiple applicable copy-down methods for
  method map-into-rigid-one
    (fun :: <function>, target :: <mutable-collection>, coll :: <stretchy-object-vector>,
     #next next-method :: <object>) => (target :: <mutable-collection>), picking one at random 

stretchy-vector.dylan:665: -------------------------------------------------
stretchy-vector.dylan:665: define inline copy-down-method map-into-rigid-one
stretchy-vector.dylan:666:   (fun :: <function>, target :: <mutable-collection>, coll :: <stretchy-object-vector>) =>
stretchy-vector.dylan:667:   (target :: <mutable-collection>);
stretchy-vector.dylan:667: ----------------------------------

Warning at stretchy-vector.dylan:669: 
  Multiple applicable copy-down methods for
  method map-into-rigid-one
    (fun :: <function>, target :: <mutable-sequence>, coll :: <stretchy-object-vector>,
     #next next-method :: <object>) => (target :: <mutable-collection>), picking one at random 

stretchy-vector.dylan:669: -------------------------------------------------
stretchy-vector.dylan:669: define inline copy-down-method map-into-rigid-one
stretchy-vector.dylan:670:   (fun :: <function>, target :: <mutable-sequence>, coll :: <stretchy-object-vector>) =>
stretchy-vector.dylan:671:   (target :: <mutable-collection>);
stretchy-vector.dylan:671: ----------------------------------

//
// Conditions for {<compilation-record> "deque"}:
//

Warning at deque.dylan:680: 
  Multiple applicable copy-down methods for
  method map-as-one
    (type :: singleton(<deque>), function :: <function>, collection :: <infinite-range>,
     #next next-method :: <object>) => (new-collection :: <vector>), picking one at random 

deque.dylan:680: ----------------------------------------------------
deque.dylan:680: define copy-down-method map-as-one (type == <deque>,
deque.dylan:681:                                     function :: <function>,
deque.dylan:682:                                     collection ::  <infinite-range>) =>
deque.dylan:683:   (new-collection :: <vector>); // actually :: type
deque.dylan:683: ------------------------------

Warning at deque.dylan:684: 
  Multiple applicable copy-down methods for
  method map-as-one
    (type :: singleton(<object-deque>), function :: <function>, collection :: <infinite-range>,
     #next next-method :: <object>) => (new-collection :: <vector>), picking one at random 

deque.dylan:684: -----------------------------------------------------------
deque.dylan:684: define copy-down-method map-as-one (type == <object-deque>,
deque.dylan:685:                                     function :: <function>,
deque.dylan:686:                                     collection ::  <infinite-range>) =>
deque.dylan:687:   (new-collection :: <vector>); // actually :: type
deque.dylan:687: ------------------------------

Warning at deque.dylan:689: 
  Multiple applicable copy-down methods for
  method map-as-one
    (type :: singleton(<deque>), function :: <function>, collection :: <explicit-key-collection>,
     #next next-method :: <object>) => (new-collection :: <vector>), picking one at random 

deque.dylan:689: ----------------------------------------------------
deque.dylan:689: define copy-down-method map-as-one (type == <deque>,
deque.dylan:690:                                     function :: <function>,
deque.dylan:691:                                     collection ::  <explicit-key-collection>) =>
deque.dylan:692:   (new-collection :: <vector>);
deque.dylan:692: ------------------------------

Warning at deque.dylan:694: 
  Multiple applicable copy-down methods for
  method map-as-one
    (type :: singleton(<object-deque>), function :: <function>,
     collection :: <explicit-key-collection>, #next next-method :: <object>) =>
      (new-collection :: <vector>), picking one at random 

deque.dylan:694: -----------------------------------------------------------
deque.dylan:694: define copy-down-method map-as-one (type == <object-deque>,
deque.dylan:695:                                     function :: <function>,
deque.dylan:696:                                     collection ::  <explicit-key-collection>) =>
deque.dylan:697:   (new-collection :: <vector>);
deque.dylan:697: ------------------------------

//
// Conditions for {<compilation-record> "range"}:
//

Warning at range.dylan:878: 
  Multiple applicable copy-down methods for
  method map-as-one
    (type :: singleton(<list>), function :: <function>, collection :: <infinite-range>,
     #next next-method :: <object>) => (new-collection :: <vector>), picking one at random 

range.dylan:878: -----------------------------------------
range.dylan:878: define inline copy-down-method map-as-one
range.dylan:879:   (type == <list>, function :: <function>, collection ::  <infinite-range>) =>
range.dylan:880:   (new-collection :: <vector>); // actually :: type
range.dylan:880: ------------------------------

//
// Conditions for {<compilation-record> "table"}:
//

Serious warning at table.dylan:873: 
  Invalid type for argument new-key in call to
  entry-key-setter
    (new-key :: <object>, v :: <entry-keys>, index :: <integer>) => (new-key :: <object>):
  <raw-pointer> supplied, <object> expected. 

table.dylan:873:               -------------------------------------
table.dylan:873:               entry-key(dst-keys, dst-index) := key;
table.dylan:873:               -------------------------------------

Serious warning at table.dylan:873: 
  Invalid type for argument new-key in call to
  entry-key-setter
    (new-key :: <object>, v :: <entry-keys>, index :: <integer>) => (new-key :: <object>):
  <raw-pointer> supplied, <object> expected. 

table.dylan:873:               -------------------------------------
table.dylan:873:               entry-key(dst-keys, dst-index) := key;
table.dylan:873:               -------------------------------------

Serious warning at table.dylan:873: 
  Invalid type for argument new-key in call to
  entry-key-setter
    (new-key :: <object>, v :: <entry-keys>, index :: <integer>) => (new-key :: <object>):
  <raw-pointer> supplied, <object> expected. 

table.dylan:873:               -------------------------------------
table.dylan:873:               entry-key(dst-keys, dst-index) := key;
table.dylan:873:               -------------------------------------

